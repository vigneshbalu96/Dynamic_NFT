name: CI

on:
  push:
  pull_request:
  workflow_dispatch:

env:
  FOUNDRY_PROFILE: ci

jobs:
  check:
    strategy:
      fail-fast: true

    name: Foundry project
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - name: Install Foundry
        uses: foundry-rs/foundry-toolchain@v1
        with:
          version: nightly

      - name: Show Forge version
        run: |
          forge --version

      - name: Run Forge fmt
        run: |
          forge fmt --check
        id: fmt

      - name: Run Forge build
        run: |
          forge build --sizes
        id: build

      - name: Run Forge tests
        run: |
          forge test -vvv
        id: test




#Certainly! Here's a summary of the GitHub Actions configurations for your Foundry project:

# test.yml
# - Located in .github/workflows, this file is set up for continuous integration (CI) tasks.
# - It triggers on push, pull_request, and workflow_dispatch.
# - The workflow involves checking out the code, installing Foundry, and running checks for code formatting, building, and testing the project to ensure code quality and prevent errors in the development process.

# ci.yml
# - Located under lib/forge-std/.github/workflows/, this script is more detailed and specific to the forge-std library.
# - It includes backward compatibility checks with various versions of the Solidity compiler and measures compilation times using the --via-ir option.
# - The workflow triggers are the same as test.yml, focusing on maintaining the library's compatibility and performance across different compiler versions.

# sync.yml
# - Located under the same directory as ci.yml, this workflow automates the synchronization of a release branch in response to a new release being created.
# - It is triggered only when a release tag starting with v1 is created.
# - It checks out the repository, configures Git for automated commits, and forcefully updates the v1 branch to match the newly created release.

#These scripts collectively automate key development processes, ensuring code quality, maintaining compatibility, and synchronizing release branches, which are crucial elements for effective continuous integration and deployment in your Foundry project.